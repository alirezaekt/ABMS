#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled7:server');
var https = require('https');
var fs = require('fs');



// this is mine

var http = require('http');
var http_port    =   process.env.PORT || 8080;

var options = {
    key: fs.readFileSync('mycert.key'),
    cert: fs.readFileSync('mycert.pem')
};

// app.use(function(req, res, next) {
//     if (req.secure) {
//         next();
//     } else {
//         res.redirect('https://' + req.headers.host + req.url);
//     }
// });

//
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


var server = https.createServer(options,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
//mine
http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(http_port,port) + req.url });
    console.log("http request, will go to >> ");
    console.log("https://" + req.headers['host'].replace(http_port,port) + req.url );
    res.end();
}).listen(http_port)
//--

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



//
// var io = require('socket.io')(https) //require socket.io module and pass the http object (server)
// var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO
// var LED = new Gpio(4, 'out'); //use GPIO pin 4 as output
// var pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses, and releases should be handled
//
// https.listen(8080); //listen to port 8080
//
// function handler (req, res) { //create server
//     fs.readFile(__dirname + '/public/index.html', function(err, data) { //read file index.html in public folder
//         if (err) {
//             res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error
//             return res.end("404 Not Found");
//         }
//         res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML
//         res.write(data); //write data from index.html
//         return res.end();
//     });
// }
//
// io.sockets.on('connection', function (socket) {// WebSocket Connection
//     var lightvalue = 0; //static variable for current status
//     pushButton.watch(function (err, value) { //Watch for hardware interrupts on pushButton
//         if (err) { //if an error
//             console.error('There was an error', err); //output error message to console
//             return;
//         }
//         lightvalue = value;
//         socket.emit('light', lightvalue); //send button status to client
//     });
//     socket.on('light', function(data) { //get light switch status from client
//         lightvalue = data;
//         if (lightvalue != LED.readSync()) { //only change LED if status has changed
//             LED.writeSync(lightvalue); //turn LED on or off
//         }
//     });
// });
//
// process.on('SIGINT', function () { //on ctrl+c
//     LED.writeSync(0); // Turn LED off
//     LED.unexport(); // Unexport LED GPIO to free resources
//     pushButton.unexport(); // Unexport Button GPIO to free resources
//     process.exit(); //exit completely
// });